apply from: '../config/android/library.gradle'
// apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'kotlin-kapt'

android {
  sourceSets.each {
    it.java.srcDirs += "src/$it.name/kotlin"
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

kotlin {
    targets {
        fromPreset(presets.android, 'androidLib')

        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
        def iOSTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') \
                            ? presets.iosArm64 : presets.iosX64
        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (!buildForDevice) {
                        embedBitcode("disable")
                    }
                }
            }
        }

        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$CONFIG.kotlinx_coroutines_version"
            }
        }

        androidLibMain {
            dependencies {
                implementation "com.squareup.okhttp3:okhttp:$CONFIG.versions.okhttp"
                implementation "io.ktor:ktor-client-json-jvm:$CONFIG.versions.ktor_version"
            }
        }

        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$CONFIG.versions.ktor_version"
                implementation "io.ktor:ktor-client-json-native:$CONFIG.versions.ktor_version"
            }
        }
    }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$CONFIG.versions.kotlin"
  compileOnly 'androidx.annotation:annotation:1.0.1'
  implementation "com.rakuten.tech.mobile:manifest-config-annotations:0.1.0"
  kapt "com.rakuten.tech.mobile:manifest-config-processor:0.1.0"
  implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0"

  androidTestImplementation 'junit:junit:4.12'
  androidTestImplementation 'org.robolectric:robolectric:3.8'
  androidTestImplementation "org.amshove.kluent:kluent-android:1.48"
  androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
  androidTestImplementation "org.mockito:mockito-inline:2.28.2"
  androidTestImplementation "com.squareup.okhttp3:mockwebserver:$CONFIG.versions.okhttp"
  // androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.0-M1'
}

apply from: '../gradle/documentation.gradle'

apply from: '../gradle/maven-publication.gradle'
publishing {
  publications {
    RemoteConfig(MavenPublication, androidArtifact())
  }
}

def isSnapshot = project.version.contains('-')
if (isSnapshot) {
  apply from: '../gradle/artifactory.gradle'
} else {
  apply from: '../gradle/bintray.gradle'
}

apply from: "../config/quality/jacoco/android.gradle"
jacoco {
  toolVersion = "0.8.3"
}

apply from: "../config/quality/checkstyle/android.gradle"
apply from: "../config/quality/detekt/android.gradle"
dependencies {
  // Enable the KtLint rules
  detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.0.0-RC14"
}
